name: release

on:
  push:
    tags:
      - 'v*'          # build & release for tags like v0.1.0
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag (e.g. v0.1.0) that will be checked out in all repos for the release'
        required: true
        type: string

concurrency:
  group: moddex-release-${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}
  cancel-in-progress: false

jobs:
  build-package:
    runs-on: ubuntu-22.04
    permissions:
      contents: write   # required for release upload
    env:
      TARGET_REF: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}

    steps:
      # 1) Checkout this packaging repo
      - name: Checkout packaging repo (this)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # keep tag metadata

      # 2) Backend repo (private) - same tag as trigger/manual run
      - name: Checkout backend at same tag
        uses: actions/checkout@v4
        with:
          repository: aklozyp/Moddex-Backend
          ref: ${{ env.TARGET_REF }}
          path: Moddex-Backend
          token: ${{ secrets.GH_TOKEN }}   # fine-grained PAT with Contents:Read

      # 3) Frontend repo (private) - same tag as trigger/manual run
      - name: Checkout frontend at same tag
        uses: actions/checkout@v4
        with:
          repository: aklozyp/Moddex-Frontend
          ref: ${{ env.TARGET_REF }}
          path: Moddex-Frontend
          token: ${{ secrets.GH_TOKEN }}

      # 4) Java 21 + Maven cache
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      # 5) Build backend (via mvnw in backend folder)
      - name: Build backend JAR
        run: |
          chmod +x Moddex-Backend/mvnw
          Moddex-Backend/mvnw -f Moddex-Backend/pom.xml -B -DskipTests clean package
      - name: Collect backend artifact
        run: |
          mkdir -p build/backend
          cp Moddex-Backend/target/*.jar build/backend/Moddex-Backend.jar

      # 6) Node 20 + npm cache
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'Moddex-Frontend/package-lock.json'

      # 7) Build frontend dist
      - name: Build frontend dist
        run: |
          pushd Moddex-Frontend
          npm ci
          npm run build --if-present
          popd
          mkdir -p build/frontend
          rsync -a --delete Moddex-Frontend/dist/ build/frontend/

      # 8) Assemble bundle (scripts/templates + artifacts)
      - name: Assemble bundle
        run: |
          mkdir -p bundle/scripts bundle/packaging/systemd bundle/packaging/caddy bundle/config/defaults bundle/frontend bundle/backend
          cp -r build/frontend/* bundle/frontend/
          cp -r build/backend/Moddex-Backend.jar bundle/backend/
          cp -r scripts/* bundle/scripts/
          cp -r packaging/systemd/* bundle/packaging/systemd/
          cp -r packaging/caddy/* bundle/packaging/caddy/
          if [ -d config/defaults ]; then cp -r config/defaults/* bundle/config/defaults/ || true; fi

          tar -C bundle -czf moddex-$TARGET_REF-linux-amd64.tar.gz .
          sha256sum moddex-$TARGET_REF-linux-amd64.tar.gz > moddex-$TARGET_REF-SHA256SUMS

      # 9) Prepare download script artifacts
      - name: Prepare download script assets
        run: |
          cp scripts/download.sh download.sh
          sha256sum download.sh > download.sh.sha256

      # 10) Create release and upload assets
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TARGET_REF }}
          files: |
            moddex-${{ env.TARGET_REF }}-linux-amd64.tar.gz
            moddex-${{ env.TARGET_REF }}-SHA256SUMS
            download.sh
            download.sh.sha256


